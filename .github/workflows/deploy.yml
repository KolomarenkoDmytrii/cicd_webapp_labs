name: Django CI/CD

on:
  push:
    branches:
      - main
  workflow_call:
    secrets:
      HEROKU_API_KEY:
        required: true
      HEROKU_EMAIL:
        required: true

jobs:     
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: 'Create .env file'
        run: |
          touch .env
          echo POSTGRES_DB="${{ vars.POSTGRES_DB }}" >> .env
          echo POSTGRES_USER="${{ vars.POSTGRES_USER }}" >> .env
          echo POSTGRES_HOST="${{ vars.POSTGRES_HOST }}" >> .env
          echo DJANGO_DEBUG="${{ vars.DJANGO_DEBUG }}" >> .env
          echo PORT="${{ vars.GUNICORN_PORT }}" >> .env
          echo DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo DATABASE_URL="${{ secrets.DATABASE_URL }}" >> .env

      # Runs a single command using the runners shell
      - name: Run a makemigrations script
        run: docker-compose -f docker-compose.yml run web python company/manage.py makemigrations

      # Runs a single command using the runners shell
      - name: Run a migrate script
        run: docker-compose -f docker-compose.yml run web python company/manage.py migrate
  
      # Runs a single command using the runners shell
      - name: Run a test script for main app
        run: docker-compose -f docker-compose.yml run web python company/manage.py test main.tests
  
      # Runs a single command using the runners shell
      - name: Run a test script for services app
        run: docker-compose -f docker-compose.yml run web python company/manage.py test services.tests

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: 'Create .env file'
      run: |
        touch .env
        echo POSTGRES_DB="${{ vars.POSTGRES_DB }}" >> .env
        echo POSTGRES_USER="${{ vars.POSTGRES_USER }}" >> .env
        echo POSTGRES_HOST="${{ vars.POSTGRES_HOST }}" >> .env
        echo PORT="${{ vars.GUNICORN_PORT }}" >> .env
        echo DJANGO_DEBUG="${{ vars.DJANGO_DEBUG }}" >> .env
        echo DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> .env

    #- name: Heroku login credentials
    #- run: echo "${{secrets.HEROKU_EMAIL}}"
    
    - uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: "knu-cicd-web-app-lab"
        heroku_email: "${{secrets.HEROKU_EMAIL}}"
        usedocker: true
      #run: |
          #cat > ~/.netrc <<EOF
            #machine api.heroku.com
              #login ${{ secrets.HEROKU_EMAIL }}
              #password ${{ secrets.HEROKU_API_KEY }}
            #machine git.heroku.com
              #login ${{ secrets.HEROKU_EMAIL }}
              #password ${{ secrets.HEROKU_API_KEY }}
            #EOF
          #echo flfl ${{ secrets.HEROKU_EMAIL }}
          #touch ~/.netrc
          #echo "machine api.heroku.com" >> ~/.netrc
          #echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
          #echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
          #echo "machine git.heroku.com" >> ~/.netrc
          #echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
          #echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
            
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

    #- name: Add Heroku remote
      #run: heroku git:remote --app knu-cicd-web-app-lab

    - name: Build and deploy
      run: |
        heroku container:login
        heroku container:push web --app knu-cicd-web-app-lab
        heroku container:release web --app knu-cicd-web-app-lab
